set -e

use_asdf() {
  # Load if not loaded already
  if [[ -z "${ASDF_DIR}" ]]; then
    local __asdf_dir
    case "$(uname)" in
      Darwin*)
        __asdf_dir="$(brew --prefix asdf)"
        ;;
      *)
        __asdf_dir="${HOME}/.asdf"
        ;;
    esac
    if [[ -s "${__asdf_dir}/asdf.sh" ]]; then
      # shellcheck disable=SC1090
      source "${__asdf_dir}/asdf.sh"
    fi
  fi
}

asdf_has() {
  if [[ $# -lt 1 ]]; then
    echo "ERROR: Wrong number of parameters, expected:" >&2
    echo "       asdf_has [PLUGIN]" >&2
    return 1
  fi
  local _plugin="$1"
  if [[ -n "${ASDF_DATA_DIR}" ]] && [[ -d "${ASDF_DATA_DIR}/plugins/${_plugin}" ]]; then
    return 0
  elif [[ -d "${ASDF_DIR}/plugins/${_plugin}" ]]; then
    return 0
  elif [[ -d "${HOME}/.asdf/plugins/${_plugin}" ]]; then
    return 0
  fi
  return 1
}

use_sdk() {
  if [[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]]; then
    # shellcheck disable=SC1090
    source "${HOME}/.sdkman/bin/sdkman-init.sh"
  fi
  if [[ $# -eq 2 ]]; then
    local candidate="$1"
    local candidate_version="$2"
    if ! SDK_OFFLINE_MODE=true sdk use "${candidate}" "${candidate_version}"; then
      sdk install "${candidate}" "${candidate_version}" < /dev/null
      SDK_OFFLINE_MODE=true sdk use "${candidate}" "${candidate_version}"
    fi
  else
    echo "ERROR: Wrong number of parameters, expected:" >&2
    echo "use sdk [CANDIDATE] [VERSION]" >&2
    return 1
  fi
}

realpath() {
  [[ $1 == /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

layout_python-venv() {
  local python="${1:-python3}"
  [[ $# -gt 0 ]] && shift
  unset PYTHONHOME
  if [[ -n "$VIRTUAL_ENV" ]]; then
    VIRTUAL_ENV="$(realpath "${VIRTUAL_ENV}")"
  else
    local python_version
    python_version="$("$python" -c "import platform; print(platform.python_version())")"
    if [[ -z "$python_version" ]]; then
      log_error "Could not detect Python version"
      return 1
    fi
    VIRTUAL_ENV="$(direnv_layout_dir)/python-$python_version-venv"
  fi
  export VIRTUAL_ENV
  if [[ ! -d "$VIRTUAL_ENV" ]]; then
    log_status "no venv found; creating $VIRTUAL_ENV"
    "$python" -m venv --system-site-packages "$VIRTUAL_ENV"
  fi

  PATH_add "${VIRTUAL_ENV}/bin"
}

layout_poetry() {
  if [[ ! -f pyproject.toml ]]; then
    log_error 'No pyproject.toml found.  Use `poetry new` or `poetry init` to create one first.'
    exit 2
  fi

  local VENV=$(poetry env list --full-path | grep Activated | cut -d' ' -f1)
  if [[ -z $VENV || ! -d $VENV/bin ]]; then
    log_error 'No created poetry virtual environment found.  Use `poetry install` to create one first.'
    exit 2
  fi
  VENV=$VENV/bin
  export VIRTUAL_ENV=$(echo "$VENV" | rev | cut -d'/' -f2- | rev)
  export POETRY_ACTIVE=1
  PATH_add "$VENV"
}

use_pre-commit() {
  if ! [[ -f "$(git rev-parse --show-toplevel)/.git/hooks/pre-commit" ]]; then
    pre-commit install --install-hooks
    pre-commit install --install-hooks --hook-type commit-msg
  fi
}

use_git-message-template() {
  if [[ -r "$(git rev-parse --show-toplevel)/.gitmessage" ]]; then
    if ! git config --local --get commit.template ; then
      git config --local --add commit.template .gitmessage
    fi
  fi
}

use_pipx() {
  if ! has python3; then
    echo "Python 3 version 3.6 or higher required for PipX"
    return 1
  fi

  if [[ -n "${VIRTUAL_ENV}" ]]; then
    if ! python3 -m pip show -qq pipx; then
      echo "Installing PipX into virtual env"
      python3 -m pip install --upgrade pip pipx setuptools wheel
    fi
  else
    if ! has easy_install3; then
      # `setuptools` is not a direct dependency of `pipx`, but it is required for correct operation
      python3 -m pip install --user setuptools wheel
    fi
    if ! has pipx; then
      echo "Installing PipX for the current user"
      python3 -m pip install --user pipx
    fi
  fi

  # shellcheck disable=SC2155
  export PIPX_HOME="$(direnv_layout_dir)/pipx"
  export PIPX_BIN_DIR="${PIPX_HOME}/bin"
  PATH_add "${PIPX_BIN_DIR}"

  ## Periodic PipX package upgrades
  mkdir -p "${PIPX_HOME}"
  local -r _update_marker="${PIPX_HOME}/.lastupdated"
  local _last_updated
  local _now
  local _update_interval=$((7 * 24 * 60 * 60)) # One week
  if [[ -f "${_update_marker}" ]]; then
    case "$(uname)" in
      Darwin*)
        # MacOS is "special"
        _last_updated="$(stat -f '%m' "${_update_marker}")"
        ;;
      *)
        _last_updated="$(stat --format='%Y' "${_update_marker}")"
        ;;
    esac
    _now="$(date '+%s')"
    if [[ $((_now - _last_updated)) -gt $_update_interval ]]; then
      echo "Upgrading PipX packages..."
      pipx upgrade-all
      touch "${_update_marker}"
    fi
  else
    touch "${_update_marker}"
  fi
}

